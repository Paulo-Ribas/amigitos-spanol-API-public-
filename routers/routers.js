let express = require("express")
let app = express()
const router = express.Router()
const userController = require('../controllers/userControllers')
const homeController = require('../controllers/HomeController')
const friendController = require('../controllers/userFriendsController')
const middlewareAuth = require('../middlewares/auth')
const multerAuth = require('../middlewares/multerAuth')
const userFriendsController = require("../controllers/userFriendsController")
const userVideosController = require('../controllers/UserVideoControllers')
const multerSingleVideo = require("../middlewares/multerVideo")
const multerImg = require('../middlewares/multerImg')
const multerThumbnail = require('../middlewares/multerThumbnail')
const roomControllers = require("../controllers/roomControllers")
const chatRoom = require('../controllers/ChatController')
const path = require('path')
const fileUpload = require('express-fileupload')

router.get('/', homeController.index)
router.get('/users', userController.getUsers)
router.get('/user/:id', userController.getUser)
router.get('/friends/:userId', friendController.getUserFriends )
router.get('/friendRequest/:friendId', middlewareAuth, friendController.getFriendRequest)
router.get('/isPeding/:friendId', middlewareAuth, userFriendsController.isPeding)
router.get('/usersRequests', middlewareAuth, userFriendsController.getUsersFriendRequest)
router.get('/userFriendsInfo/:userId', userFriendsController.getFriendsInfo)
router.get('/friendsAmount/:userId', friendController.getFriendsAmount)
router.get('/videos', middlewareAuth, userVideosController.getVideos)
router.get('/room/:url', roomControllers.getRoom)
router.get('/rooms',  roomControllers.getRooms)
router.get('/roomsRenderizated',roomControllers.getRoomsRenderizated)
router.get('/roomMembers', roomControllers.getMembers)

router.post('/user',userController.newUser)
router.post('/login', userController.Login)
router.post('/validate', middlewareAuth, homeController.validate)
router.post('/forgetedpass', userController.recoveryPassword)
router.post('/request', middlewareAuth, friendController.addFriend)
router.post('/friend', middlewareAuth, friendController.acceptFriend)
router.post('/makeThumbnail', middlewareAuth, fileUpload({
    useTempFiles: true,
    tempFileDir: path.resolve(__dirname, '../', 'attachments')
},(req, res, next) => {
    console.log('pelo menos esse está funcionando')
    next()
}), userVideosController.createThumbnail)
router.post('/convertVideo', middlewareAuth, fileUpload({
    useTempFiles: true,
    tempFileDir: path.resolve(__dirname, '../', 'attachments')
},(req, res, next) => {
    next()
}), userVideosController.videoProcessBeforeUpload)
router.post('/thumbnail', multerAuth, multerThumbnail, middlewareAuth, userVideosController.saveThumb)
router.post('/video',multerAuth, multerSingleVideo, middlewareAuth, userVideosController.uploadVideo) // o multer reescreve o body, ou seja, o decoded vai se perder, para resolver isso por agora, colocarei o auth depois do multer, (o que não impede de fazer upload de arquivos pela url msm sem uma pessoa logada), para resolver isso de verdade, quando for para produção, usarei express session, (gusta agradaçe ao professor com muitos beijos, muitos e muitos mesmo por ter mostrado isso)
router.post('/room', middlewareAuth, roomControllers.CreateRoom)
router.post('/member', middlewareAuth, roomControllers.addMember)
router.post('/joinRoom', middlewareAuth, roomControllers.joinByPass)

router.delete('/friend/:friendId', middlewareAuth, userFriendsController.removeFriend)
router.delete('/video/:file', middlewareAuth, userVideosController.deleteVideo)
router.delete('/request/:friendId', middlewareAuth, friendController.refuseRequest)

router.put('/changepasswordbytoken/:token', userController.changePasswordByToken)
router.put('/userName', middlewareAuth,userController.changeUserName)
router.put('/email', middlewareAuth, userController.changeEmail)
router.put('/password', middlewareAuth, userController.changePassword)
router.put('/profileImg', multerAuth, multerImg, middlewareAuth, userController.editImg)
router.put('/roomMembers', middlewareAuth, roomControllers.removeMember)
router.put('/description', middlewareAuth, userController.editDescription)
module.exports = router